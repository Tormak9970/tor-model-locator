(function(x,j){typeof exports=="object"&&typeof module<"u"?j(exports,require("fs"),require("path")):typeof define=="function"&&define.amd?define(["exports","fs","path"],j):(x=typeof globalThis<"u"?globalThis:x||self,j(x.TorModelLocator={},x.fs,x.path))})(this,function(x,j,g){"use strict";const S=a=>a&&typeof a=="object"&&"default"in a?a:{default:a},e=S(j),s=S(g);function I(a){const y=e.default.readFileSync(a,"utf-8"),f=JSON.parse(y),p={slots:f};for(let i=0;i<f.length;i++){const r=f[i];r.materialInfo.eyeMatInfo&&(p.eyeMatInfo=r.materialInfo.eyeMatInfo)}return p}function b(a,y,f){function p(i){return i.materialInfo.mats!==void 0}if(p(a)){const i=a.materialInfo.mats;for(let r=0;r<i.length;r++){const u=i[r],l=s.default.join(y,"assets","materials","skinMats",u.slotName);e.default.existsSync(l)||e.default.mkdirSync(l,{recursive:!0});let o=s.default.join(f,u.materialInfo.matPath);if(e.default.existsSync(o)){o=o.replace(/\\/g,"/");const c=o.lastIndexOf("/"),n=s.default.join(l,o.substring(c));e.default.copyFileSync(o,n)}const m=Object.values(u.ddsPaths);for(let c=0;c<m.length;c++){let n=m[c];(n=="/.dds"||n==".dds")&&(n=s.default.join("art","defaultassets","black.dds"));let t=s.default.join(f,n);if(e.default.existsSync(t)){t=t.replace(/\\/g,"/");const d=t.lastIndexOf("/"),h=s.default.join(l,t.substring(d+1));e.default.copyFileSync(t,h)}else throw new Error(`Missing texture file in extraction: ${t}`)}}}else{const i=s.default.join(y,"assets","models",a.slotName);e.default.existsSync(i)||e.default.mkdirSync(i,{recursive:!0});const r=a.models;for(let n=0;n<r.length;n++){let t=s.default.join(f,r[n]);if(e.default.existsSync(t)){t=t.replace(/\\/g,"/");const d=t.lastIndexOf("/"),h=s.default.join(i,t.substring(d));e.default.copyFileSync(t,h)}else throw new Error(`Missing model file in extraction: ${t}`)}const u=s.default.join(y,"assets","materials",a.slotName);e.default.existsSync(u)||e.default.mkdirSync(u,{recursive:!0});let l=s.default.join(f,a.materialInfo.matPath);l=l.replace(/\\/g,"/");const o=l.lastIndexOf("/"),m=s.default.join(u,l.substring(o));e.default.copyFileSync(l,m);const c=Object.values(a.materialInfo.ddsPaths);for(let n=0;n<c.length;n++){let t=c[n];(t=="/.dds"||t==".dds")&&(t=s.default.join("art","defaultassets","black.dds"));let d=s.default.join(f,t);if(e.default.existsSync(d)){d=d.replace(/\\/g,"/");const h=d.lastIndexOf("/"),L=s.default.join(u,d.substring(h+1));e.default.copyFileSync(d,L)}else throw new Error(`Missing texture file in extraction: ${d}`)}}}function P(a,y){var r;const f=a,p=s.default.join(f,"assets","paths.json"),i=y;if(e.default.existsSync(i)){const{slots:u,eyeMatInfo:l}=I(p);if((r=l==null?void 0:l.otherValues)!=null&&r.derived){const o=s.default.join(f,"assets","materials","eye");e.default.existsSync(o)||e.default.mkdirSync(o,{recursive:!0});const m=Object.values(l.ddsPaths);for(let c=0;c<m.length;c++){let n=m[c];(n=="/.dds"||n==".dds")&&(n=s.default.join("art","defaultassets","black.dds"));let t=s.default.join(i,n);if(e.default.existsSync(t)){t=t.replace(/\\/g,"/");const d=t.lastIndexOf("/"),h=s.default.join(o,t.substring(d+1));e.default.copyFileSync(t,h)}else throw new Error(`Missing texture file in extraction: ${t}`)}}for(let o=0;o<u.length;o++)b(u[o],f,i);return!0}else throw new Error("Extraction folder does not exist or is undefined")}x.locate=P,Object.defineProperties(x,{__esModule:{value:!0},[Symbol.toStringTag]:{value:"Module"}})});
